#+TITLE: Emacs Configuration file
#+AUTHOR: Marvin Liu
#+EMAIL: psychicalcoder@gmail.com
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About

  This is my Emacs configuration file written in Org-mode. Org-babel provide a
  good semi-literate programming environment. Insert 
  #+BEGIN_SRC org :tangle no
    ,#+BEGIN_SRC emacs-lisp
    (your-emacs-lisp-code-here) 
    ,#+END_SRC
  #+END_SRC
  in this file. Then the source block will be tangle automatically and be eval
  by Emacs.

* Packages
   
  Managing extensions for Emacs with built-in package manager =package=.

#+begin_src emacs-lisp
  (require 'package)
  (require 'cl)
#+end_src

  Package can be fetched from different mirrors, melpa is the largest archive and is well maintained.
  Org is an offical mirror of org-mode.
  
  If your Emacs version is smaller than 26.3, it may cause some bad request
  issues. However Funtoo's offical portage hasn't been updated. To solve this
  problem, I set gnutls-algorithm-priority to "NORMAL:-VERS_TLS1.3". This bug
  has been solved in 26.3.

#+begin_src emacs-lisp
  (when (version< emacs-version "26.3")
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

  The following configuration assumes that the packages listed below are installed.
  If we would like to add some extensions, put the names in =marvin/package-list=.

#+begin_src emacs-lisp
  (defvar marvin/package-list '(rainbow-delimiters
                                doom-themes
                                google-translate
                                company
                                yasnippet
                                yasnippet-snippets
                                helm
                                htmlize
                                flycheck
                                magit
                                web-mode
                                yaml-mode
                                markdown-mode
                                markdown-mode+
                                multi-term
                                company-lsp
                                lsp-mode
                                lsp-ui
                                helm-lsp
                                smart-mode-line
                                smart-mode-line-atom-one-dark-theme
                                ))
  (dolist (package marvin/package-list)
    (unless (package-installed-p package)
      (package-install package)))

  (add-to-list 'load-path "~/.emacs.d/thirdparty/")
#+end_src

* General defaults

  We can set variables to whatever vale we'd like using =setq-default=.

#+begin_src emacs-lisp
  (setq-default inhibit-startup-message t)
#+end_src

  Some variable are buffer-local, so changing them sing =setq= will only change them in a single buffer.
  Using =setq-default= we change the buffer-local variable's default value.

#+begin_src emacs-lisp
  (setq-default fill-column 80                    ; Maximum line width
                truncate-lines t                  ; Don't fold lines
                indent-tabs-mode nil              ; Use spaces instead of tabs
                split-width-threshold 160         ; Split verticly be default
                split-height-threshold nil        ; Split verticly by default
                auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+end_src

  Answering /yes/ and /no/ to each question from Emacs can be tedious, a
  single /y/ or /n/ will suffice.
   
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp
  (defvar marvin/emacs-auto-save-directory
    (concat user-emacs-directory "autosaves"))

  (setq backup-directory-alist
        `((".*" . ,marvin/emacs-auto-save-directory))
        auto-save-file-name-transforms
        `((".*"  ,marvin/emacs-auto-save-directory t)))
#+end_src

  Set =utf-8= as preferred coding system.

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
#+END_SRC

* Modes 
  There are some modes that are enabled by default that I don't find
  particularly useful.We create a list of these modes, and disable all of
  these.

  #+begin_src emacs-lisp
  (dolist (mode '(tool-bar-mode
                  scroll-bar-mode
                  menu-bar-mode
                  blink-cursor-mode))
    (funcall mode 0))
  #+end_src

  Let's apply the same techniqe for enabling modes that are disabled by
  default.
   
  #+begin_src emacs-lisp
  (dolist (mode
           '(abbrev-mode
             column-number-mode
             delete-selection-mode
             dirtrack-mode
             show-paren-mode
             electric-pair-mode))
    (funcall mode 1))
  #+end_src

  Enable some modes for specific major modes.

  #+begin_src emacs-lisp
  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook 'linum-mode)
  #+end_src

* Key bindings
  
#+BEGIN_SRC emacs-lisp
  (defvar marvin-bindings-map (make-keymap)
    "A keymap for custom bindings.")
#+END_SRC

  Lastly we need to activate the map by creating and activating the
  =minor-mode=.

#+begin_src emacs-lisp
  (define-minor-mode marvin-bindings-mode
    "A mode that activates custom-bindings."
    t nil marvin-bindings-map)
#+end_src

** Bindings for built-ins

  #+begin_src emacs-lisp
    (define-key marvin-bindings-map (kbd "C-x ,") 'previous-buffer)
    (define-key marvin-bindings-map (kbd "C-x .") 'next-buffer)
    (define-key marvin-bindings-map (kbd "C-x /") '(lambda () 
                                                     (interactive)
                                                     (kill-buffer-and-window)))
  #+end_src

* Visual
   
  Change the color-theme to =doom-molokai=

  #+begin_src emacs-lisp
  (require 'doom-themes)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-molokai t)
  #+end_src

** Font 

  I use /Menlo/ and /Noto Sans CJK TC/ as my English and Chinese default font.
  I separatly set these fonts in specific size to avoid Chinese aligning
  problems in org-table.

  #+begin_src emacs-lisp
     (defvar emacs-english-font "Menlo")
     (defvar emacs-cjk-font "Noto Sans CJK TC")

     (defvar emacs-font-size-pair '(17 . 20)
       "(english . chinese)")

     (defvar emacs-font-size-pair-list
       '((14 . 16) (15 . 18) (17 . 20) (18 . 22) (20 . 24)))

     (defun font-exist-p (fontname)
       "Test if this font is exist or not."
       (if (or (not fontname) (string= fontname ""))
           nil
         (if (not (x-list-fonts fontname)) nil t)))


     (defun set-font (english chinese size-pair)
       "Setup emacs English and Chinese font on x windows-system"

       (if (font-exist-p english)
           (set-frame-font (format "%s:pixelsize=%d" english (car size-pair)) t)
         (message (concat "Missing font: " english)))

       (if (font-exist-p chinese)
           (dolist (charset '(kana han symbol cjk-misc bopomofo))
             (set-fontset-font (frame-parameter nil 'font) charset
                                 (font-spec :family chinese :size (cdr size-pair))))
         (message (concat "Missing font: " chinese))))

     (defun init-font()
       (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair))

     (defun emacs-step-font-size (step)
        "Increase/Decrease emacs's font size."
        (let ((scale-steps emacs-font-size-pair-list))
          (if (< step 0) (setq scale-steps (reverse scale-steps)))
          (setq emacs-font-size-pair
                    (or (cadr (member emacs-font-size-pair scale-steps))
                       emacs-font-size-pair))
             (when emacs-font-size-pair
               (message "emacs font size set to %.1f" (car emacs-font-size-pair))
               (init-font))))

         (defun increase-emacs-font-size ()
           "Increase emacs's font-size according emacs-font-size-pair-list."
           (interactive) (emacs-step-font-size 1))

         (defun decrease-emacs-font-size ()
           "Decrease emacs's font-size according emacs-font-size-pair-list."
           (interactive) (emacs-step-font-size -1))

         (add-hook 'after-make-frame-functions
                   (lambda (frame)
                     (select-frame frame)
                     (when (display-graphic-p frame)
                       (init-font))))

         (add-hook 'emacs-startup-hook 'init-font)
  #+end_src

*** Keybindings

#+begin_src emacs-lisp
  (define-key marvin-bindings-map (kbd "C-=") 'increase-emacs-font-size)
  (define-key marvin-bindings-map (kbd "C--") 'decrease-emacs-font-size)
#+end_src

** Title

   Set *All Hail Emacs* as the windows title.
   
#+begin_src emacs-lisp
  (setq-default frame-title-format (list "All Hail Emacs!"))
#+end_src

** Modeline

   Define the colors of the modeline.

#+BEGIN_SRC emacs-lisp
  (defvar minor-mode-show nil)

  (defface mode-line-buffer-name
    '((t :background "dark green" :foreground "light green"))
    "Face used for buffer name part of the mode line."    
    :group 'mode-line-faces
    :group 'basic-faces)

  (set-face-attribute 'mode-line nil
                      :background "#353644"
                      :foreground "white"
                      :box '(:line-width 6 :color "#353644")
                      :overline nil
                      :underline nil)

  (set-face-attribute 'mode-line-inactive nil
                      :background "#565063"
                      :foreground "white"
                      :box '(:line-width 6 :color "#565063")
                      :overline nil
                      :underline nil)
#+END_SRC

   Define the modeline format
   =date time version-control buffername (row,column) [percent/total-letter] Major-mode=

#+begin_src emacs-lisp
  (setq-default mode-line-format
                (list
                 '(:eval (propertize (format-time-string " %b %d %H:%M ")
                                     'face 'font-lock-builtin-face))

                 '(:eval (propertize (substring vc-mode 5)
                                     'face 'font-lock-comment-face))
                 '(:eval (propertize " %b "
                                     'face
                                     (let ((face (buffer-modified-p)))
                                       (if face 'font-lock-warning-face
                                         'font-lock-type-face))
                                     'help-echo (buffer-file-name)))
                 " ("
                 (propertize "%02l" 'face 'font-lock-keyword-face) ","
                 (propertize "%02c" 'face 'font-lock-keyword-face)
                 ") "
                 " ["
                 (propertize "%p" 'face 'font-lock-constant-face)
                 "/"
                 (propertize "%I" 'face 'font-lock-constant-face)
                 "] "

                 '(:eval (propertize
                          " " 'display
                          `((space :align-to (- (+ right right-fringe
                                                   right-margin)
                                                ,(+ 3 (string-width
                                                       mode-name)))))))
                 (propertize " %m " 'face 'font-lock-string-face)
                 ))
#+end_src

*** Smart mode line

    Use Smart-mode-line to make the mode-line more beautiful.

#+BEGIN_SRC emacs-lisp
  (require 'smart-mode-line)
  (setq sml/theme 'atom-one-dark
        sml/shorten-directory t
        sml/shorten-modes t
        sml/no-confirm-load-theme t
        sml/vc-mode-show-backend t)
  (sml/setup t)
#+END_SRC

* Company
  
  I use company-mode as my auto completion interface. I want to get
  suggestions right after I type a letter, hence the no delay settings and
  short prefix length.
   
#+BEGIN_SRC emacs-lisp 
  (require 'company)
  (setq company-idle-delay 0.3
        company-minimum-prefix-length 1
        company-show-numbers t)

  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

  The default backends list of company mode is a little bit complex so I remove
  some useless backends for me.

  Company-yasnippet will block the other backends, so I remove it from
  company-backends. Instead of add into backends list I define a specific key
  binding for it.

#+BEGIN_SRC emacs-lisp
  (defvar marvin/company-backends '(company-elisp
                                    company-capf
                                    company-files
                                    company-keywords
                                    ;; company-yasnippet
                                    marvin/company-org
                                    company-dabbrev-code
                                    company-dabbrev))

  (add-hook 'after-init-hook '(lambda ()
                                (setq-default company-backends marvin/company-backends)))

#+END_SRC

  In org-mode company mode doesn't work well, so I see this [[https://emacs.stackexchange.com/questions/21171/company-mode-completion-for-org-keywords][post]].

#+BEGIN_SRC emacs-lisp
  (require 'org)

  (defun marvin/company-org (command &optional arg &rest ignored)
    (interactive (list 'interactive))
    (cl-case command
      (interactive (company-begin-backend 'org-keyword-backend))
      (prefix (and (eq major-mode 'org-mode)
                   (cons (company-grab-line "^#\\+\\(\\w*\\)" 1)
                         t)))
      (candidates (mapcar #'upcase
                          (cl-remove-if-not
                           (lambda (c) (string-prefix-p arg c))
                           (pcomplete-completions))))
      (ignore-case t)
      (duplicates t)))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (define-key company-mode-map (kbd "C-c y") 'company-yasnippet)
#+END_SRC

* Google Translate
  
  This package allows to translate the strings using Google Translate service
  directly from GNU Emacs.

#+begin_src emacs-lisp
  (require 'google-translate)
  (require 'google-translate-default-ui)
  (setq google-translate-default-source-language "en"
        google-translate-default-target-language "zh-TW")
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (define-key marvin-bindings-map (kbd "C-c g t") 'google-translate-at-point)
#+end_src

* Helm
   
  *Helm* is an Emacs framework for incremental completions and narrowing
  selections. It provides an easy-to-use API for developers wishing to build
  their own Helm applications in Emacs, powerful search tools and dozens of
  already built-in commands providing completion to almost everything. It is a
  must-have for anyone using Emacs as a main work environment. Helm has been
  widely adopted by many Emacs power-users. It is available in Melpa and can
  be easily installed from the Emacs package manager.

 #+BEGIN_SRC emacs-lisp
 (require 'helm-config)
 (require 'helm)

 (helm-autoresize-mode t)

 (setq helm-M-x-fuzzy-match t
       helm-buffers-fuzzy-matching t
       helm-recentf-fuzzy-match t)

 (helm-mode 1)
 #+END_SRC
** Keybindings

#+begin_src emacs-lisp
  (define-key marvin-bindings-map (kbd "C-x b") 'helm-mini)
  (define-key marvin-bindings-map (kbd "C-x C-f") 'helm-find-files)
  (define-key marvin-bindings-map (kbd "M-x") 'helm-M-x)
  (define-key marvin-bindings-map (kbd "C-c h g") 'helm-google-suggest)
#+end_src

* Yasnippet

#+begin_src emacs-lisp
  (require 'yasnippet)
  (add-hook 'after-init-hook 'yas-global-mode)
#+end_src

  Automatically insert =GPL= when open a new empty file if it is available.

#+BEGIN_SRC emacs-lisp
  (add-hook 'find-file-hook
            '(lambda ()
               (when (and (buffer-file-name)
                          (not (file-exists-p (buffer-file-name)))
                          (= (point-max) 1))
                 (let ((header-snippet "GPL")
                       (yas/fallback-behavior 'return-nil))
                   (insert header-snippet)
                   ;; if can't expand snippet, delete instert string
                   (if (not (yas/expand))
                       (delete-region (point-min) (point-max)))))))
#+END_SRC

* Flycheck

  Flycheck is an on-the-fly syntax checking tool. It support a lot of languages
  (including c++ irony), but I don't like to see lots of warning in elisp so I
  turn it off in Emacs Lisp Mode.

#+BEGIN_SRC emacs-lisp
  (require 'flycheck)
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (add-hook 'emacs-lisp-mode-hook '(lambda ()
                                     (interactive)
                                     (flycheck-mode -1)))
#+END_SRC

* C/C++ Mode

  I migrated from Irony+Rtags to lsp-mode/clangd.
  Lsp-mode's performance is incredibly cool and amazing.

** Keybindings

#+BEGIN_SRC emacs-lisp
  (defun marvin/c-c++-key-bindings ()
    "my custom keybindings for c++-mode"
    (local-set-key (kbd "C-c d") 'comment-line)
    (local-set-key (kbd "C-c D") 'comment-region)
    (local-set-key (kbd "C-.") 'lsp-ui-peek-find-definitions))

  (add-hook 'c++-mode-hook 'marvin/c-c++-key-bindings)
  (add-hook 'c-mode-hook 'marvin/c-c++-key-bindings)
#+END_SRC

* C/C++ Compile and Run

#+begin_src emacs-lisp
  (defvar marvin/compile-generated-file-name "./marvinemacsgen")

  (defun marvin/compile (command)
    (interactive)
    (compile (concat command " " (buffer-file-name) " -o " marvin/compile-generated-file-name)))

  (defun marvin/run ()
    (interactive)
    (let ((buffer (get-buffer "*Run*")))
      (if (not (eql buffer nil))
          (kill-buffer buffer)))
    (apply 'make-comint "Run" marvin/compile-generated-file-name nil '())
    (switch-to-buffer-other-window "*Run*"))
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (defun marvin/c++-compile-run ()
    (local-set-key (kbd "C-c c") '(lambda () (interactive)
                                    (marvin/compile "g++ -O2 -std=c++14 ")))
    (local-set-key (kbd "C-c e") 'marvin/run)
    (local-set-key (kbd "C-c r") '(lambda () (interactive)
                                    (marvin/compile "g++ -O2 -std=c++14 ")
                                    (marvin/run))))

  (defun marvin/c-compile-run ()
    (local-set-key (kbd "C-c c") '(lambda () (interactive)
                                    (marvin/compile "gcc")))
    (local-set-key (kbd "C-c e") 'marvin/run)
    (local-set-key (kbd "C-c r") '(lambda () (interactive)
                                    (marvin/compile "gcc")
                                    (marvin/run))))


  (add-hook 'c++-mode-hook 'marvin/c++-compile-run)
  (add-hook 'c-mode-hook 'marvin/c-compile-run)
#+end_src

* Magit

  Press /C-c j/ to open a Magit control panel.

#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (define-key marvin-bindings-map (kbd "C-c j") 'magit-status)
#+END_SRC

* Line Moving

  Emacs' built-in moving line function /transpose-lines/ is strangs so I add
  town function to enhance this feature.


#+BEGIN_SRC emacs-lisp
  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (define-key marvin-bindings-map (kbd "M-<up>") 'move-line-up)
  (define-key marvin-bindings-map (kbd "M-<down>") 'move-line-down)
#+END_SRC

* Multi-term

#+BEGIN_SRC emacs-lisp
  (require 'multi-term)
  (setq multi-term-program "/bin/bash")
  (setq system-uses-terminfo nil)
#+END_SRC 

* LSP-mode

  Now lsp-mode is powerful enough for me, so I emigrated from irony to lsp-mode
  for c++. 

#+BEGIN_SRC emacs-lisp
  (require 'lsp-mode)
  (require 'lsp-ui)
  (require 'company-lsp)

  (setq lsp-ui-doc-enable t
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-use-childframe 'top
        lsp-ui-doc-include-signature t
        lsp-ui-peek-enable t
        lsp-ui-peek-list-width 60
        lsp-ui-peek-peek-height 25
        lsp-ui-sideline-enable nil
        lsp-ui-flycheck-enable t
        lsp-ui-flycheck-list-position 'right
        lsp-ui-flycheck-live-reporting t
        lsp-prefer-flymake nil
        )

  (add-to-list 'marvin/company-backends 'company-lsp)
  (add-to-list 'marvin/company-backends 'company-irony-c-headers)
  (add-hook 'c++-mode-hook #'lsp)
  (add-hook 'c-mode-hook #'lsp)
  (add-hook 'python-mode-hook #'lsp)

  (setq company-lsp-async t
        company-lsp-cache-candidates nil)

  (require 'helm-lsp)

#+END_SRC

* Dired

#+begin_src emacs-lisp
  (require 'dired)
  (require 'dired-x)
;;  (require 'dired+)

  (setq dired-dwim-target t)

  (defun dired-directory-sort ()
    "Dired sort hook to list directories first."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2)
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max))))
    (and (featurep 'xemacs)
         (fboundp 'dired-insert-set-properties)
         (dired-insert-set-properties (point-min) (point-max)))
    (set-buffer-modified-p nil))

  (add-hook 'dired-after-readin-hook 'dired-directory-sort)

  (defun my-dired-backward ()
    "Go back to the parent directory (..), and the the cursor will be moved to
    where the previous directory."
    (interactive)
    (let* ((DIR (buffer-name)))
      (if (equal DIR "*Find*")
          (quit-window t)
        (progn (find-alternate-file "..")
               (re-search-forward DIR nil :no-error)
               (revert-buffer)))))

  (define-key dired-mode-map (kbd "q") 'my-dired-backward)

  (defun dired-my-find-alternate-file ()
    (interactive)
    (if (file-regular-p (dired-get-filename))
        (dired-find-file)
      (dired-find-alternate-file)))

  (define-key dired-mode-map (kbd "RET") 'dired-my-find-alternate-file)
  (put 'dired-find-alternate-file 'disabled nil)

  (setq dired-listing-switches "-alh")

  (defun dired-show-only (regexp)
    (interactive "sFiles to show (regexp): ")
    (dired-mark-files-regexp regexp)
    (dired-toggle-marks)
    (dired-do-kill-lines))

  (define-key dired-mode-map (kbd "C-i") 'dired-show-only)

  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'top)

  (defun dired-open-file-with-external-program ()
    "Open file with external program in dired"
    (interactive)
    (let* ((file (dired-get-filename nil t)))
      (message "Opening %s..." file)
      (call-process "xdg-open" nil 0 nil file)
      (message "Opening %s done" file)))

  (define-key dired-mode-map (kbd "M-RET") 'dired-open-file-with-external-program)

  (defun open-current-directory-with-external-program ()
    "Open current directory with external program."
    (interactive)
    (call-process "xdg-open" nil 0 nil (file-turename default-directory)))

  (define-key dired-mode-map (kbd "C-x C-j")
    'open-current-directory-with-external-program)

  (defun dired-find-name-in-current-directory ()
    (interactive)
    (find-name-dired default-directory
                     (format "*%s*" (read-from-minibuffer "Pattern: ")))
    (set-buffer-multibyte t))

  (define-key dired-mode-map "f" 'dired-find-name-in-current-directory)

  (setq find-name-arg "-iname")

  (setq find-ls-option '("-print0 | xargs -0 ls -ald" . ""))

  (defun dired-open-mounted-media-dir ()
    (interactive)
    (find-file "/var/run/media/"))
  (define-key dired-mode-map (kbd "C-c m") 'dired-open-mounted-media-dir)

  ;; 按 s 排序檔案，會先問你要根據什麼屬性排序，而且紀錄下排序狀態，不會
  ;; 跨 buffer 就不見了。
  (defun dired-sort-size ()
    "Dired sort by size."
    (interactive) (dired-sort-other (concat dired-listing-switches "S")))
  (defun dired-sort-extension ()
    "Dired sort by extension."
    (interactive) (dired-sort-other (concat dired-listing-switches "X")))
  (defun dired-sort-ctime ()
    "Dired sort by create time."
    (interactive) (dired-sort-other (concat dired-listing-switches "ct")))
  (defun dired-sort-utime ()
    "Dired sort by access time."
    (interactive) (dired-sort-other (concat dired-listing-switches "ut")))
  (defun dired-sort-time ()
    "Dired sort by time."
    (interactive) (dired-sort-other (concat dired-listing-switches "t")))
  (defun dired-sort-name ()
    "Dired sort by name."
    (interactive) (dired-sort-other (concat dired-listing-switches "")))

  (defvar v-dired-sort 'name)
  (defun dired-sort-and-remember ()
    ""
    (interactive)
    (setq v-dired-sort
          (intern
           (completing-read "Sort by: " '(name size extension ctime utime time) nil t
                            (cond ((eq v-dired-sort 'name) "time")
                                  ((eq v-dired-sort 'time) "name")
                                  ((eq v-dired-sort 'size) "name")
                                  (t nil)))))
    (dired-sort-auto-apply))

  (defun dired-sort-auto-apply ()
    (cond ((eq v-dired-sort 'name) (dired-sort-name))
          ((eq v-dired-sort 'size) (dired-sort-size))
          ((eq v-dired-sort 'extenstion) (dired-sort-extenstion))
          ((eq v-dired-sort 'ctime) (dired-sort-ctime))
          ((eq v-dired-sort 'utime) (dired-sort-utime))
          ((eq v-dired-sort 'time) (dired-sort-time))))

  (add-hook 'dired-mode-hook 'dired-sort-auto-apply)
  (define-key dired-mode-map "s" 'dired-sort-and-remember)
#+end_src

